/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    inputs: [],
    name: "SeasonOver",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e2b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635e24b0f11461005c57806372fb9703146100715780639b33b42914610084578063a2f77bcc146100ad578063d7c81b551461012b575b600080fd5b61006f61006a366004610c41565b610142565b005b61006f61007f366004610c74565b610424565b610097610092366004610ca4565b61055a565b6040516100a49190610cbf565b60405180910390f35b6100f86100bb366004610d23565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100a4565b61013460005481565b6040519081526020016100a4565b60ff82166000818152600160205260409020600201546001600160a01b03161561017f5760405163df469ccb60e01b815260040160405180910390fd5b8160058160ff1611156101a557604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101d75760016101da565b60025b6002840154909150600160a01b9004600116156102015782546001600160a01b0316610210565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461024157604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156102ec5760058160ff16111561027557604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff166006811061028f5761028f610d3c565b018860ff16600681106102a4576102a4610d3c565b602081049091015460ff601f9092166101000a900416905060008190036102d957816102cf81610d68565b92509350506102ec565b50806102e481610d68565b915050610244565b5080836003018360ff166006811061030657610306610d3c565b018760ff166006811061031b5761031b610d3c565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461035c83610d68565b82546101009290920a60ff818102199093169183160217909155604080513381528983166020820152918a1692507fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c910160405180910390a26103c1878784846105f9565b1561041b576002830180546001600160a01b031916339081179091556040805160ff8a16815260208101929092527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b038116330361043a57600080fd5b610442610adf565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b03199094169190941617919091179091559151909182916104f29060038301906006610b0c565b5050600054604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a160008054908061054f83610d87565b919050555050505050565b610562610adf565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156105ee576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116105ac57905050505050508152602001906001019061058b565b505050509050919050565b60008061060886868686610699565b90508060040361061c576001915050610691565b600061062a87878787610765565b90508060040361063f57600192505050610691565b600061064d8888888861081c565b9050806004036106635760019350505050610691565b600061067189898989610922565b905080600403610688576001945050505050610691565b60009450505050505b949350505050565b60006001816106a88683610da0565b90505b6106b6866006610dbf565b60ff168160ff1610156106fd576106cf87868387610a71565b156106e657816106de81610d87565b9250506106eb565b6106fd565b806106f581610d68565b9150506106ab565b5060ff85161561075c576000610714600187610dbf565b90505b61072387868387610a71565b1561073a578161073281610d87565b92505061073f565b61075a565b60ff81161561075a578061075281610dd8565b915050610717565b505b95945050505050565b60006001816107748583610da0565b90505b610782856006610dbf565b60ff168160ff1610156107c95761079b87828887610a71565b156107b257816107aa81610d87565b9250506107b7565b6107c9565b806107c181610d68565b915050610777565b5060ff84161561075c5760006107e0600186610dbf565b90505b6107ef87828887610a71565b1561073a57816107fe81610d87565b92505060ff81161561075a578061081481610dd8565b9150506107e3565b600060018161082b8583610da0565b90505b610839856006610dbf565b60ff168160ff1610156108805761085287828387610a71565b15610869578161086181610d87565b92505061086e565b610880565b8061087881610d68565b91505061082e565b5060ff841615801590610895575060ff851615155b1561075c5760006108a7600186610dbf565b905060006108b6600188610dbf565b90505b6108c588838388610a71565b156108dc57826108d481610d87565b9350506108e1565b610916565b60ff821615806108f2575060ff8116155b610916578161090081610dd8565b925050808061090e90610dd8565b9150506108b9565b50509050949350505050565b6000600160ff84161580159061093a575060ff851615155b156109cd57600061094c600186610dbf565b9050600061095b876001610da0565b90505b60068160ff1610156109ca5761097688838388610a71565b1561098d578261098581610d87565b935050610992565b6109ca565b60ff821615806109a6575060068160ff1610155b6109ca57816109b481610dd8565b92505080806109c290610d68565b91505061095e565b50505b60ff8416158015906109e1575060ff851615155b1561075c5760006109f3856001610da0565b90506000610a02600188610dbf565b90505b60068260ff16108015610a16575060015b1561091657610a2788838388610a71565b156108dc5782610a3681610d87565b93505060068260ff16101580610a4d575060ff8116155b6109165781610a5b81610d68565b9250508080610a6990610dd8565b915050610a05565b600080600160008760ff16815260200190815260200160002060030190508260ff16818660ff1660068110610aa857610aa8610d3c565b018560ff1660068110610abd57610abd610d3c565b602081049091015460ff601f9092166101000a90041614915050949350505050565b6040518060c001604052806006905b610af6610b56565b815260200190600190039081610aee5790505090565b8260068101928215610b46579160200282015b82811115610b46578251610b369083906006610b74565b5091602001919060010190610b1f565b50610b52929150610c03565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610bf75791602002820160005b83821115610bc857835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610b8a565b8015610bf55782816101000a81549060ff0219169055600101602081600001049283019260010302610bc8565b505b50610b52929150610c17565b80821115610b525760008155600101610c03565b80821115610b525760008155600101610c03565b803560ff81168114610c3c57600080fd5b919050565b60008060408385031215610c5457600080fd5b610c5d83610c2b565b9150610c6b60208401610c2b565b90509250929050565b600060208284031215610c8657600080fd5b81356001600160a01b0381168114610c9d57600080fd5b9392505050565b600060208284031215610cb657600080fd5b610c9d82610c2b565b610480810181836000805b6006808210610cd95750610d19565b835185845b83811015610cff57825160ff16825260209283019290910190600101610cde565b50505060c094909401935060209290920191600101610cca565b5050505092915050565b600060208284031215610d3557600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610d7e57610d7e610d52565b60010192915050565b600060018201610d9957610d99610d52565b5060010190565b60ff8181168382160190811115610db957610db9610d52565b92915050565b60ff8281168282160390811115610db957610db9610d52565b600060ff821680610deb57610deb610d52565b600019019291505056fea264697066735822122050fe1dcca3df89d42e8799722278290684ab6b2646e6e3edc509c4d7d0bb345264736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
