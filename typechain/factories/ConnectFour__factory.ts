/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610efe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635e24b0f11461005c57806372fb9703146100715780639b33b42914610084578063a2f77bcc146100ad578063d7c81b551461012b575b600080fd5b61006f61006a366004610cbf565b610142565b005b61006f61007f366004610cf2565b610424565b610097610092366004610d22565b61055a565b6040516100a49190610d3d565b60405180910390f35b6100f86100bb366004610da1565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100a4565b61013460005481565b6040519081526020016100a4565b60ff82166000818152600160205260409020600201546001600160a01b03161561017f5760405163df469ccb60e01b815260040160405180910390fd5b8160058160ff1611156101a557604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101d75760016101da565b60025b6002840154909150600160a01b9004600116156102015782546001600160a01b0316610210565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461024157604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156102ec5760058160ff16111561027557604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff166006811061028f5761028f610dba565b018860ff16600681106102a4576102a4610dba565b602081049091015460ff601f9092166101000a900416905060008190036102d957816102cf81610de6565b92509350506102ec565b50806102e481610de6565b915050610244565b5080836003018360ff166006811061030657610306610dba565b018760ff166006811061031b5761031b610dba565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461035c83610de6565b82546101009290920a60ff818102199093169183160217909155604080513381528983166020820152918a1692507fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c910160405180910390a26103c1878784846105f9565b1561041b576002830180546001600160a01b031916339081179091556040805160ff8a16815260208101929092527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b038116330361043a57600080fd5b610442610b5d565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b03199094169190941617919091179091559151909182916104f29060038301906006610b8a565b5050600054604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a160008054908061054f83610e05565b919050555050505050565b610562610b5d565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156105ee576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116105ac57905050505050508152602001906001019061058b565b505050509050919050565b600080610608868686866106cd565b90508060040361061c5760019150506106c5565b600061062a87878787610799565b90508060040361063f576001925050506106c5565b600061064d88888888610850565b90508060040361066357600193505050506106c5565b600061067189898989610956565b90506106a760405180604001604052806012815260200171189858daddd85c99105b99db1950dbdd5b9d60721b81525082610a85565b806004036106bc5760019450505050506106c5565b60009450505050505b949350505050565b60006001816106dc8683610e1e565b90505b6106ea866006610e3d565b60ff168160ff1610156107315761070387868387610ace565b1561071a578161071281610e05565b92505061071f565b610731565b8061072981610de6565b9150506106df565b5060ff851615610790576000610748600187610e3d565b90505b61075787868387610ace565b1561076e578161076681610e05565b925050610773565b61078e565b60ff81161561078e578061078681610e56565b91505061074b565b505b95945050505050565b60006001816107a88583610e1e565b90505b6107b6856006610e3d565b60ff168160ff1610156107fd576107cf87828887610ace565b156107e657816107de81610e05565b9250506107eb565b6107fd565b806107f581610de6565b9150506107ab565b5060ff841615610790576000610814600186610e3d565b90505b61082387828887610ace565b1561076e578161083281610e05565b92505060ff81161561078e578061084881610e56565b915050610817565b600060018161085f8583610e1e565b90505b61086d856006610e3d565b60ff168160ff1610156108b45761088687828387610ace565b1561089d578161089581610e05565b9250506108a2565b6108b4565b806108ac81610de6565b915050610862565b5060ff8416158015906108c9575060ff851615155b156107905760006108db600186610e3d565b905060006108ea600188610e3d565b90505b6108f988838388610ace565b15610910578261090881610e05565b935050610915565b61094a565b60ff82161580610926575060ff8116155b61094a578161093481610e56565b925050808061094290610e56565b9150506108ed565b50509050949350505050565b6000600160ff8416156109f1576000610970600186610e3d565b9050600061097f876001610e1e565b90505b60068160ff1610156109ee5761099a88838388610ace565b156109b157826109a981610e05565b9350506109b6565b6109ee565b60ff821615806109ca575060068160ff1610155b6109ee57816109d881610e56565b92505080806109e690610de6565b915050610982565b50505b60ff851615610790576000610a07856001610e1e565b90506000610a16600188610e3d565b90505b60068260ff16108015610a2a575060015b1561094a57610a3b88838388610ace565b156109105782610a4a81610e05565b93505060068260ff16101580610a61575060ff8116155b61094a5781610a6f81610de6565b9250508080610a7d90610e56565b915050610a19565b610aca8282604051602401610a9b929190610e73565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052610b3c565b5050565b600080600160008760ff16815260200190815260200160002060030190508260ff16818660ff1660068110610b0557610b05610dba565b018560ff1660068110610b1a57610b1a610dba565b602081049091015460ff601f9092166101000a90041614915050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040518060c001604052806006905b610b74610bd4565b815260200190600190039081610b6c5790505090565b8260068101928215610bc4579160200282015b82811115610bc4578251610bb49083906006610bf2565b5091602001919060010190610b9d565b50610bd0929150610c81565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610c755791602002820160005b83821115610c4657835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c08565b8015610c735782816101000a81549060ff0219169055600101602081600001049283019260010302610c46565b505b50610bd0929150610c95565b80821115610bd05760008155600101610c81565b80821115610bd05760008155600101610c81565b803560ff81168114610cba57600080fd5b919050565b60008060408385031215610cd257600080fd5b610cdb83610ca9565b9150610ce960208401610ca9565b90509250929050565b600060208284031215610d0457600080fd5b81356001600160a01b0381168114610d1b57600080fd5b9392505050565b600060208284031215610d3457600080fd5b610d1b82610ca9565b610480810181836000805b6006808210610d575750610d97565b835185845b83811015610d7d57825160ff16825260209283019290910190600101610d5c565b50505060c094909401935060209290920191600101610d48565b5050505092915050565b600060208284031215610db357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610dfc57610dfc610dd0565b60010192915050565b600060018201610e1757610e17610dd0565b5060010190565b60ff8181168382160190811115610e3757610e37610dd0565b92915050565b60ff8281168282160390811115610e3757610e37610dd0565b600060ff821680610e6957610e69610dd0565b6000190192915050565b604081526000835180604084015260005b81811015610ea15760208187018101516060868401015201610e84565b506000606082850101526060601f19601f830116840101915050826020830152939250505056fea26469706673582212207e5aa0b4e70758bd4784638547355a687782d913fd6b29c1a32ff55b98a1502564736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
