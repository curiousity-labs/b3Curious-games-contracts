/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { ConnectFour, ConnectFourInterface } from "../ConnectFour";

const _abi = [
  {
    inputs: [],
    name: "GameOver",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSelection",
    type: "error",
  },
  {
    inputs: [],
    name: "NotYourTurn",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "team",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "TurnTaken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "opponent",
        type: "address",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gameId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        internalType: "address",
        name: "teamOne",
        type: "address",
      },
      {
        internalType: "address",
        name: "teamTwo",
        type: "address",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "turn",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
    ],
    name: "getGameBoard",
    outputs: [
      {
        internalType: "uint8[6][6]",
        name: "",
        type: "uint8[6][6]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_gameId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "column",
        type: "uint8",
      },
    ],
    name: "makeMove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f42806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80635e24b0f11461005c57806372fb9703146100715780639b33b42914610084578063a2f77bcc146100ad578063d7c81b551461012b575b600080fd5b61006f61006a366004610d03565b610142565b005b61006f61007f366004610d36565b610424565b610097610092366004610d66565b61055a565b6040516100a49190610d81565b60405180910390f35b6100f86100bb366004610de5565b60016020819052600091825260409091208054918101546002909101546001600160a01b039283169291821691811690600160a01b900460ff1684565b604080516001600160a01b0395861681529385166020850152919093169082015260ff90911660608201526080016100a4565b61013460005481565b6040519081526020016100a4565b60ff82166000818152600160205260409020600201546001600160a01b03161561017f5760405163df469ccb60e01b815260040160405180910390fd5b8160058160ff1611156101a557604051631efccef760e11b815260040160405180910390fd5b60ff84166000908152600160208190526040822060028101549092918291600160a01b900416156101d75760016101da565b60025b6002840154909150600160a01b9004600116156102015782546001600160a01b0316610210565b60018301546001600160a01b03165b6001600160a01b0316336001600160a01b03161461024157604051631cc191eb60e31b815260040160405180910390fd5b60005b60078160ff1610156102ec5760058160ff16111561027557604051631efccef760e11b815260040160405180910390fd5b6000846003018260ff166006811061028f5761028f610dfe565b018860ff16600681106102a4576102a4610dfe565b602081049091015460ff601f9092166101000a900416905060008190036102d957816102cf81610e2a565b92509350506102ec565b50806102e481610e2a565b915050610244565b5080836003018360ff166006811061030657610306610dfe565b018760ff166006811061031b5761031b610dfe565b60208104909101805460ff938416601f9093166101000a9283029284021916919091179055600284018054600160a01b900490911690601461035c83610e2a565b82546101009290920a60ff818102199093169183160217909155604080513381528983166020820152918a1692507fa6f41f711ea470b4b237d1b3e43b201e53517677308ae067a273fb1948ddbf0c910160405180910390a26103c1878784846105f9565b1561041b576002830180546001600160a01b031916339081179091556040805160ff8a16815260208101929092527fb7f35e624e036288272fbf3342c09219261ff29fdddd826989b289134e9ae535910160405180910390a15b50505050505050565b806001600160a01b038116330361043a57600080fd5b610442610ba1565b6040805160a0810182523381526001600160a01b038581166020808401918252600084860181815260608601828152608087018981528354845260019485905297909220865181549087166001600160a01b03199182161782559451938101805494871694909516939093179093559151600282018054935160ff16600160a01b026001600160a81b03199094169190941617919091179091559151909182916104f29060038301906006610bce565b5050600054604080519182523360208301526001600160a01b038716908201527f8946648bc1dbc670d3f07e2c4de91731227b6d4ccc53b8ab1e951e84d960577e915060600160405180910390a160008054908061054f83610e49565b919050555050505050565b610562610ba1565b60ff8216600090815260016020526040808220815160c081019092529091600390910190600690835b828210156105ee576040805160c08101918290529085840190600690826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116105ac57905050505050508152602001906001019061058b565b505050509050919050565b600080610608868686866106cd565b905061063e604051806040016040528060128152602001711f9f9f9f9f9a1bdc9a5bdb985b10dbdd5b9d60721b815250826107e9565b806004036106505760019150506106c5565b600061065e87878787610832565b905080600403610673576001925050506106c5565b6000610681888888886108dd565b90508060040361069757600193505050506106c5565b60006106a5898989896109e3565b9050806004036106bc5760019450505050506106c5565b60009450505050505b949350505050565b600080600190506106ff6040518060400160405280600681526020016531b7b63ab6b760d11b8152508660ff166107e9565b600061070c866001610e62565b90505b60068160ff1610156107815761074760405180604001604052806007815260200166696e646578206960c81b8152508260ff166107e9565b61075387868387610b12565b1561076a578161076281610e49565b92505061076f565b610781565b8061077981610e2a565b91505061070f565b5060ff8516156107e0576000610798600187610e81565b90505b6107a787868387610b12565b156107be57816107b681610e49565b9250506107c3565b6107de565b60ff8116156107de57806107d681610e9a565b91505061079b565b505b95945050505050565b61082e82826040516024016107ff929190610eb7565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052610b80565b5050565b60006001816108418583610e62565b90505b60068160ff16101561088a5761085c87828887610b12565b15610873578161086b81610e49565b925050610878565b61088a565b8061088281610e2a565b915050610844565b5060ff8416156107e05760006108a1600186610e81565b90505b6108b087828887610b12565b156107be57816108bf81610e49565b92505060ff8116156107de57806108d581610e9a565b9150506108a4565b60006001816108ec8583610e62565b90505b6108fa856006610e81565b60ff168160ff1610156109415761091387828387610b12565b1561092a578161092281610e49565b92505061092f565b610941565b8061093981610e2a565b9150506108ef565b5060ff841615801590610956575060ff851615155b156107e0576000610968600186610e81565b90506000610977600188610e81565b90505b61098688838388610b12565b1561099d578261099581610e49565b9350506109a2565b6109d7565b60ff821615806109b3575060ff8116155b6109d757816109c181610e9a565b92505080806109cf90610e9a565b91505061097a565b50509050949350505050565b6000600160ff841615610a7e5760006109fd600186610e81565b90506000610a0c876001610e62565b90505b60068160ff161015610a7b57610a2788838388610b12565b15610a3e5782610a3681610e49565b935050610a43565b610a7b565b60ff82161580610a57575060068160ff1610155b610a7b5781610a6581610e9a565b9250508080610a7390610e2a565b915050610a0f565b50505b60ff8516156107e0576000610a94856001610e62565b90506000610aa3600188610e81565b90505b60068260ff16108015610ab7575060015b156109d757610ac888838388610b12565b1561099d5782610ad781610e49565b93505060068260ff16101580610aee575060ff8116155b6109d75781610afc81610e2a565b9250508080610b0a90610e9a565b915050610aa6565b600080600160008760ff16815260200190815260200160002060030190508260ff16818660ff1660068110610b4957610b49610dfe565b018560ff1660068110610b5e57610b5e610dfe565b602081049091015460ff601f9092166101000a90041614915050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040518060c001604052806006905b610bb8610c18565b815260200190600190039081610bb05790505090565b8260068101928215610c08579160200282015b82811115610c08578251610bf89083906006610c36565b5091602001919060010190610be1565b50610c14929150610cc5565b5090565b6040518060c001604052806006906020820280368337509192915050565b600183019183908215610cb95791602002820160005b83821115610c8a57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302610c4c565b8015610cb75782816101000a81549060ff0219169055600101602081600001049283019260010302610c8a565b505b50610c14929150610cd9565b80821115610c145760008155600101610cc5565b80821115610c145760008155600101610cc5565b803560ff81168114610cfe57600080fd5b919050565b60008060408385031215610d1657600080fd5b610d1f83610ced565b9150610d2d60208401610ced565b90509250929050565b600060208284031215610d4857600080fd5b81356001600160a01b0381168114610d5f57600080fd5b9392505050565b600060208284031215610d7857600080fd5b610d5f82610ced565b610480810181836000805b6006808210610d9b5750610ddb565b835185845b83811015610dc157825160ff16825260209283019290910190600101610da0565b50505060c094909401935060209290920191600101610d8c565b5050505092915050565b600060208284031215610df757600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103610e4057610e40610e14565b60010192915050565b600060018201610e5b57610e5b610e14565b5060010190565b60ff8181168382160190811115610e7b57610e7b610e14565b92915050565b60ff8281168282160390811115610e7b57610e7b610e14565b600060ff821680610ead57610ead610e14565b6000190192915050565b604081526000835180604084015260005b81811015610ee55760208187018101516060868401015201610ec8565b506000606082850101526060601f19601f830116840101915050826020830152939250505056fea2646970667358221220e0ffc568f14e7b15e4d1ba3949925c2a2601f65c79de355bf7bb2f60897ffddf64736f6c63430008110033";

type ConnectFourConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFourConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFour__factory extends ContractFactory {
  constructor(...args: ConnectFourConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnectFour> {
    return super.deploy(overrides || {}) as Promise<ConnectFour>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConnectFour {
    return super.attach(address) as ConnectFour;
  }
  override connect(signer: Signer): ConnectFour__factory {
    return super.connect(signer) as ConnectFour__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFourInterface {
    return new utils.Interface(_abi) as ConnectFourInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFour {
    return new Contract(address, _abi, signerOrProvider) as ConnectFour;
  }
}
